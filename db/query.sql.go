// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.29.0
// source: query.sql

package db

import (
	"context"
	"database/sql"
)

const createGuild = `-- name: CreateGuild :execresult
INSERT INTO guilds (id, epicenter_role_id, luck_role_id, pvp_na_role_id, pvp_eu_role_id, pvp_as_role_id)
VALUES (?, ?, ?, ?, ?, ?)
`

type CreateGuildParams struct {
	ID              int64
	EpicenterRoleID sql.NullInt64
	LuckRoleID      sql.NullInt64
	PvpNaRoleID     sql.NullInt64
	PvpEuRoleID     sql.NullInt64
	PvpAsRoleID     sql.NullInt64
}

func (q *Queries) CreateGuild(ctx context.Context, arg CreateGuildParams) (sql.Result, error) {
	return q.db.ExecContext(ctx, createGuild,
		arg.ID,
		arg.EpicenterRoleID,
		arg.LuckRoleID,
		arg.PvpNaRoleID,
		arg.PvpEuRoleID,
		arg.PvpAsRoleID,
	)
}

const getGuild = `-- name: GetGuild :one
SELECT id, permission_role_id, epicenter_role_id, luck_role_id, pvp_na_role_id, pvp_eu_role_id, pvp_as_role_id, created_at, updated_at FROM guilds WHERE id = ?
`

func (q *Queries) GetGuild(ctx context.Context, id int64) (Guild, error) {
	row := q.db.QueryRowContext(ctx, getGuild, id)
	var i Guild
	err := row.Scan(
		&i.ID,
		&i.PermissionRoleID,
		&i.EpicenterRoleID,
		&i.LuckRoleID,
		&i.PvpNaRoleID,
		&i.PvpEuRoleID,
		&i.PvpAsRoleID,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const removeEpicenterRole = `-- name: RemoveEpicenterRole :execresult
UPDATE guilds 
SET epicenter_role_id = NULL, updated_at = NOW()
WHERE id = ?
`

func (q *Queries) RemoveEpicenterRole(ctx context.Context, id int64) (sql.Result, error) {
	return q.db.ExecContext(ctx, removeEpicenterRole, id)
}

const removeLuckRole = `-- name: RemoveLuckRole :execresult
UPDATE guilds 
SET luck_role_id = NULL, updated_at = NOW()
WHERE id = ?
`

func (q *Queries) RemoveLuckRole(ctx context.Context, id int64) (sql.Result, error) {
	return q.db.ExecContext(ctx, removeLuckRole, id)
}

const removePvpAsRole = `-- name: RemovePvpAsRole :execresult
UPDATE guilds 
SET pvp_as_role_id = NULL, updated_at = NOW()
WHERE id = ?
`

func (q *Queries) RemovePvpAsRole(ctx context.Context, id int64) (sql.Result, error) {
	return q.db.ExecContext(ctx, removePvpAsRole, id)
}

const removePvpEuRole = `-- name: RemovePvpEuRole :execresult
UPDATE guilds 
SET pvp_eu_role_id = NULL, updated_at = NOW()
WHERE id = ?
`

func (q *Queries) RemovePvpEuRole(ctx context.Context, id int64) (sql.Result, error) {
	return q.db.ExecContext(ctx, removePvpEuRole, id)
}

const removePvpNaRole = `-- name: RemovePvpNaRole :execresult
UPDATE guilds 
SET pvp_na_role_id = NULL, updated_at = NOW()
WHERE id = ?
`

func (q *Queries) RemovePvpNaRole(ctx context.Context, id int64) (sql.Result, error) {
	return q.db.ExecContext(ctx, removePvpNaRole, id)
}

const updateEpicenterRole = `-- name: UpdateEpicenterRole :execresult
UPDATE guilds 
SET epicenter_role_id = ?, updated_at = NOW()
WHERE id = ?
`

type UpdateEpicenterRoleParams struct {
	EpicenterRoleID sql.NullInt64
	ID              int64
}

func (q *Queries) UpdateEpicenterRole(ctx context.Context, arg UpdateEpicenterRoleParams) (sql.Result, error) {
	return q.db.ExecContext(ctx, updateEpicenterRole, arg.EpicenterRoleID, arg.ID)
}

const updateLuckRole = `-- name: UpdateLuckRole :execresult
UPDATE guilds 
SET luck_role_id = ?, updated_at = NOW()
WHERE id = ?
`

type UpdateLuckRoleParams struct {
	LuckRoleID sql.NullInt64
	ID         int64
}

func (q *Queries) UpdateLuckRole(ctx context.Context, arg UpdateLuckRoleParams) (sql.Result, error) {
	return q.db.ExecContext(ctx, updateLuckRole, arg.LuckRoleID, arg.ID)
}

const updatePermissionRole = `-- name: UpdatePermissionRole :execresult
UPDATE guilds 
SET permission_role_id = ?, updated_at = NOW()
WHERE id = ?
`

type UpdatePermissionRoleParams struct {
	PermissionRoleID sql.NullInt64
	ID               int64
}

func (q *Queries) UpdatePermissionRole(ctx context.Context, arg UpdatePermissionRoleParams) (sql.Result, error) {
	return q.db.ExecContext(ctx, updatePermissionRole, arg.PermissionRoleID, arg.ID)
}

const updatePvpAsRole = `-- name: UpdatePvpAsRole :execresult
UPDATE guilds 
SET pvp_as_role_id = ?, updated_at = NOW()
WHERE id = ?
`

type UpdatePvpAsRoleParams struct {
	PvpAsRoleID sql.NullInt64
	ID          int64
}

func (q *Queries) UpdatePvpAsRole(ctx context.Context, arg UpdatePvpAsRoleParams) (sql.Result, error) {
	return q.db.ExecContext(ctx, updatePvpAsRole, arg.PvpAsRoleID, arg.ID)
}

const updatePvpEuRole = `-- name: UpdatePvpEuRole :execresult
UPDATE guilds 
SET pvp_eu_role_id = ?, updated_at = NOW()
WHERE id = ?
`

type UpdatePvpEuRoleParams struct {
	PvpEuRoleID sql.NullInt64
	ID          int64
}

func (q *Queries) UpdatePvpEuRole(ctx context.Context, arg UpdatePvpEuRoleParams) (sql.Result, error) {
	return q.db.ExecContext(ctx, updatePvpEuRole, arg.PvpEuRoleID, arg.ID)
}

const updatePvpNaRole = `-- name: UpdatePvpNaRole :execresult
UPDATE guilds 
SET pvp_na_role_id = ?, updated_at = NOW()
WHERE id = ?
`

type UpdatePvpNaRoleParams struct {
	PvpNaRoleID sql.NullInt64
	ID          int64
}

func (q *Queries) UpdatePvpNaRole(ctx context.Context, arg UpdatePvpNaRoleParams) (sql.Result, error) {
	return q.db.ExecContext(ctx, updatePvpNaRole, arg.PvpNaRoleID, arg.ID)
}

const upsertGuild = `-- name: UpsertGuild :execresult
INSERT INTO guilds (id, epicenter_role_id, luck_role_id, pvp_na_role_id, pvp_eu_role_id, pvp_as_role_id)
VALUES (?, ?, ?, ?, ?, ?)
ON DUPLICATE KEY UPDATE 
    epicenter_role_id = COALESCE(VALUES(epicenter_role_id), epicenter_role_id),
    luck_role_id = COALESCE(VALUES(luck_role_id), luck_role_id),
    pvp_na_role_id = COALESCE(VALUES(pvp_na_role_id), pvp_na_role_id),
    pvp_eu_role_id = COALESCE(VALUES(pvp_eu_role_id), pvp_eu_role_id),
    pvp_as_role_id = COALESCE(VALUES(pvp_as_role_id), pvp_as_role_id),
    updated_at = NOW()
`

type UpsertGuildParams struct {
	ID              int64
	EpicenterRoleID sql.NullInt64
	LuckRoleID      sql.NullInt64
	PvpNaRoleID     sql.NullInt64
	PvpEuRoleID     sql.NullInt64
	PvpAsRoleID     sql.NullInt64
}

func (q *Queries) UpsertGuild(ctx context.Context, arg UpsertGuildParams) (sql.Result, error) {
	return q.db.ExecContext(ctx, upsertGuild,
		arg.ID,
		arg.EpicenterRoleID,
		arg.LuckRoleID,
		arg.PvpNaRoleID,
		arg.PvpEuRoleID,
		arg.PvpAsRoleID,
	)
}
