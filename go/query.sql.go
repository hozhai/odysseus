// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.29.0
// source: query.sql

package db

import (
	"context"
	"database/sql"
)

const createGuild = `-- name: CreateGuild :execresult
INSERT INTO guilds (id) VALUES (?)
`

func (q *Queries) CreateGuild(ctx context.Context, id int64) (sql.Result, error) {
	return q.db.ExecContext(ctx, createGuild, id)
}

const createPingConfig = `-- name: CreatePingConfig :execresult
INSERT INTO ping_configs (guild_id, name, description, required_role_id, target_role_id)
VALUES (?, ?, ?, ?, ?)
`

type CreatePingConfigParams struct {
	GuildID        int64
	Name           string
	Description    sql.NullString
	RequiredRoleID sql.NullInt64
	TargetRoleID   int64
}

func (q *Queries) CreatePingConfig(ctx context.Context, arg CreatePingConfigParams) (sql.Result, error) {
	return q.db.ExecContext(ctx, createPingConfig,
		arg.GuildID,
		arg.Name,
		arg.Description,
		arg.RequiredRoleID,
		arg.TargetRoleID,
	)
}

const deletePingConfig = `-- name: DeletePingConfig :execresult
DELETE FROM ping_configs WHERE guild_id = ? AND name = ?
`

type DeletePingConfigParams struct {
	GuildID int64
	Name    string
}

func (q *Queries) DeletePingConfig(ctx context.Context, arg DeletePingConfigParams) (sql.Result, error) {
	return q.db.ExecContext(ctx, deletePingConfig, arg.GuildID, arg.Name)
}

const getGuild = `-- name: GetGuild :one
SELECT id, permission_role_id, created_at, updated_at FROM guilds WHERE id = ?
`

func (q *Queries) GetGuild(ctx context.Context, id int64) (Guild, error) {
	row := q.db.QueryRowContext(ctx, getGuild, id)
	var i Guild
	err := row.Scan(
		&i.ID,
		&i.PermissionRoleID,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const getPingConfig = `-- name: GetPingConfig :one
SELECT id, guild_id, name, description, required_role_id, target_role_id, created_at, updated_at FROM ping_configs WHERE guild_id = ? AND name = ?
`

type GetPingConfigParams struct {
	GuildID int64
	Name    string
}

func (q *Queries) GetPingConfig(ctx context.Context, arg GetPingConfigParams) (PingConfig, error) {
	row := q.db.QueryRowContext(ctx, getPingConfig, arg.GuildID, arg.Name)
	var i PingConfig
	err := row.Scan(
		&i.ID,
		&i.GuildID,
		&i.Name,
		&i.Description,
		&i.RequiredRoleID,
		&i.TargetRoleID,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const getPingConfigs = `-- name: GetPingConfigs :many
SELECT id, guild_id, name, description, required_role_id, target_role_id, created_at, updated_at FROM ping_configs WHERE guild_id = ? ORDER BY name
`

func (q *Queries) GetPingConfigs(ctx context.Context, guildID int64) ([]PingConfig, error) {
	rows, err := q.db.QueryContext(ctx, getPingConfigs, guildID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []PingConfig
	for rows.Next() {
		var i PingConfig
		if err := rows.Scan(
			&i.ID,
			&i.GuildID,
			&i.Name,
			&i.Description,
			&i.RequiredRoleID,
			&i.TargetRoleID,
			&i.CreatedAt,
			&i.UpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updatePingConfig = `-- name: UpdatePingConfig :execresult
UPDATE ping_configs
SET description = ?, required_role_id = ?, target_role_id = ?, updated_at = NOW()
WHERE guild_id = ? AND name = ?
`

type UpdatePingConfigParams struct {
	Description    sql.NullString
	RequiredRoleID sql.NullInt64
	TargetRoleID   int64
	GuildID        int64
	Name           string
}

func (q *Queries) UpdatePingConfig(ctx context.Context, arg UpdatePingConfigParams) (sql.Result, error) {
	return q.db.ExecContext(ctx, updatePingConfig,
		arg.Description,
		arg.RequiredRoleID,
		arg.TargetRoleID,
		arg.GuildID,
		arg.Name,
	)
}
